user  openresty;
worker_processes  auto;
worker_rlimit_nofile 300000;
pcre_jit on;

error_log  /opt/openresty/log/error.log info;
pid        /opt/openresty/run/nginx.pid;

events {
    worker_connections 8192;
    use epoll;
    multi_accept on;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    lua_package_path '/opt/openresty/etc/lua/?.lua;;/opt/openresty/nginx/lua/?.lua;;';

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" "$http_x_sbimg_host" '
                      '"$http_x_forwarded_proto" "$http_cf_connecting_ip" $request_time';

    access_log  /opt/openresty/log/access.log  main;

    # Control expiration based on mime type
    map $sent_http_content_type $cache_expires {
        default         0;

        application/vnd.apple.mpegurl         "16d";
        video/MP2T                            "16d";
    }

    # Server wide optimizations
    include common_config.conf;

    # User variables
    include variables.conf;


    # Proxy config
    # Place file-cache on tmpfs for speed, we do not care if it is lost
    proxy_cache_path /dev/shm/nginx-cache-sbvid levels=1:2 keys_zone=SBVID:100m inactive=24h;
    proxy_cache_key "$scheme$request_method$host$request_uri";

    # Use stale cache if upstream is in troubles
    proxy_cache_use_stale updating error timeout invalid_header http_500; 

    # Prevent pile-up effect and control inflow of traffic to upstream
    proxy_cache_lock on;
    proxy_cache_lock_age 5s;
    proxy_cache_lock_timeout 3s;

    # Cache regardless of downstream controls
    proxy_ignore_headers X-Accel-Expires Cache-Control Expires Set-Cookie;

    # MP4 Proxy Upstream
    upstream mp4_proxy {
        server 127.0.0.1:8080;
    }

    server {
        listen 8080;

        location ~ /hlsify/(?<origin_scheme>https?):/+(?<origin_host>[^/]+)/(?<origin_path>.+) {

            if ($origin_host_allowed = 0) {
                return 403 "Origin not allowed";
            }

            proxy_pass $origin_scheme://$origin_host/$origin_path;
            proxy_set_header Host $origin_host;
            proxy_set_header Cookie "";
            proxy_set_header Authorization "";

            # https://github.com/kaltura/nginx-vod-module/issues/131
            header_filter_by_lua_file lua/fix_chunked_content_length.lua;
        }
    }

    server {
        listen 80 default_server;
        server_name _;

        location ~ /hls/(?<playlist>.+)\.m3u8$ {
            rewrite ^ /hlsify/$arg_source/${playlist}.m3u8?source=$arg_source last;
        }

        location ~ /hls/(?<segment>.+)\.ts$ {
            rewrite ^ /hlsify/$arg_source/${segment}.ts?source=$arg_source last;
        }

        location /hlsify {
            vod hls;
            vod_mode remote;
            vod_child_request_path /child;
            vod_upstream mp4_proxy;
            subs_filter_types application/vnd.apple.mpegurl;
            subs_filter "hlsify/.+/([^/\n]+)" "hls/$1?source=$arg_source" r;
            add_header Access-Control-Allow-Origin "*";
        }

        location /child {
            internal;
            vod_child_request;
        }
    }

}